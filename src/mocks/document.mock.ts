import { LocationMock } from './location.mock';

export class DocumentMock extends Document {
    URL: string;
    alinkColor: string;
    all: HTMLAllCollection;
    anchors: HTMLCollectionOf<HTMLAnchorElement>;
    applets: HTMLCollection;
    bgColor: string;
    body: HTMLElement;
    characterSet: string;
    charset: string;
    compatMode: string;
    contentType: string;
    cookie: string;
    currentScript: HTMLOrSVGScriptElement | null;
    defaultView: (WindowProxy & typeof globalThis) | null;
    designMode: string;
    dir: string;
    doctype: DocumentType | null;
    documentElement: HTMLElement;
    documentURI: string;
    domain: string;
    embeds: HTMLCollectionOf<HTMLEmbedElement>;
    fgColor: string;
    forms: HTMLCollectionOf<HTMLFormElement>;
    fullscreen: boolean;
    fullscreenEnabled: boolean;
    head: HTMLHeadElement;
    hidden: boolean;
    images: HTMLCollectionOf<HTMLImageElement>;
    implementation: DOMImplementation;
    inputEncoding: string;
    lastModified: string;
    linkColor: string;
    links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
    get location(): LocationMock {
        return new LocationMock();
    }
    set location(href: string | Location) {
        
    }
    onfullscreenchange: ((this: Document, ev: Event) => any) | null;
    onfullscreenerror: ((this: Document, ev: Event) => any) | null;
    onpointerlockchange: ((this: Document, ev: Event) => any) | null;
    onpointerlockerror: ((this: Document, ev: Event) => any) | null;
    onreadystatechange: ((this: Document, ev: Event) => any) | null;
    onvisibilitychange: ((this: Document, ev: Event) => any) | null;
    ownerDocument: null;
    pictureInPictureEnabled: boolean;
    plugins: HTMLCollectionOf<HTMLEmbedElement>;
    readyState: DocumentReadyState;
    referrer: string;
    rootElement: SVGSVGElement | null;
    scripts: HTMLCollectionOf<HTMLScriptElement>;
    scrollingElement: Element | null;
    timeline: DocumentTimeline;
    title: string;
    visibilityState: DocumentVisibilityState;
    vlinkColor: string;
    adoptNode= jest.fn();
    captureEvents = jest.fn();
    caretRangeFromPoint = jest.fn();
    clear = jest.fn();
    close = jest.fn();
    createAttribute = jest.fn();
    createAttributeNS = jest.fn();
    createCDATASection = jest.fn();
    createComment = jest.fn();
    createDocumentFragment = jest.fn();
    createElement = jest.fn();
    createElementNS = jest.fn();
    createEvent = jest.fn();
    createNodeIterator = jest.fn();
    createProcessingInstruction = jest.fn();
    createRange = jest.fn();
    createTextNode = jest.fn();
    createTreeWalker = jest.fn();
    execCommand = jest.fn();
    exitFullscreen = jest.fn();
    exitPictureInPicture = jest.fn();
    exitPointerLock = jest.fn();
    getElementById = jest.fn();
    getElementsByClassName = jest.fn();
    getElementsByName = jest.fn();
    getElementsByTagName = jest.fn();
    getElementsByTagNameNS = jest.fn();
    getSelection = jest.fn();
    hasFocus = jest.fn();
    hasStorageAccess = jest.fn();
    importNode = jest.fn();
    open = jest.fn();
    queryCommandEnabled = jest.fn();
    queryCommandIndeterm = jest.fn();
    queryCommandState = jest.fn();
    queryCommandSupported = jest.fn();
    queryCommandValue = jest.fn();
    releaseEvents = jest.fn();
    requestStorageAccess = jest.fn();
    write = jest.fn();
    writeln = jest.fn();
    addEventListener = jest.fn();
    removeEventListener = jest.fn();
}